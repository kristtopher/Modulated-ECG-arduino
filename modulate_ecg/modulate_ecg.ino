int8_t myEcg[] = {-2, -3, -2, -2, -2, 0, -1, -2, 0, 0, 1, 2, 0, 1, 2, 4, 3, 4, 5, 4, 2, 2, 1, 0, 1, 0, -1, -1, -2, -1, -2, 0, -2, -2, 0, 0, -2, -4, -2, -2, -2, -2, -1, -2, -3, -2, -2, -2, -2, 19, -8, -2, -2, -2, -2, 0, -2, -2, -2, -2, -2, -2, -3, -2, -3, -1, -3, -2, -4, -5, -4, -3, -2, -4, 0, 11, 26, 34, 23, 8, 0, 1, 0, 0, -2, -2, -3, -5, -2, -4, -5, -3, -2, -3, -2, -3, -2, -2, -1, 0, -2, -1, 0, 0, -1, 0, 0, 2, 2, 2, 3, 2, 4, 2, 3, 2, 1, 1, 0, 0, 0, -1, -2, -1, -3, -2, -2, -2, -2, -1, -2, -1, -2, -4, -2, -2, 0, -2, -2, -4, -3, -2, -3, 17, -9, -2, -1, -3, -2, -3, -1, -2, -3, -2, -2, -3, -4, -2, -4, -2, -3, -5, -4, -4, -5, -4, -4, -2, -2, 11, 24, 33, 24, 8, -2, -3, 1, -2, -1, -2, -4, -3, -5, -3, -4, -4, -2, -3, -2, -3, -2, -1, -2, -2, -2, -1, 0, 0, 1, 0, 0, 2, 1, 3, 2, 4, 4, 3, 2, 4, 1, 2, 0, -1, 0, 0, -2, -2, -1, -2, -3, -2, -2, 0, -2, -2, -2, -2, -2, -3, -2, -2, -2, -3, -2, -2, -2, 22, -11, -3, -2, -3, -2, -2, -1, -2, -3, -2, -3, -2, -3, -2, -3, -2, -2, -4, -5, -3, -4, -3, -5, -2, -3, 8, 21, 32, 33, 10, 0, -2, 1, 0, -2, -4, -2, -1, -4, -5, -2, -3, -3, -2, -2, -2, -1, -2, 0, -2, 0, -1, 0, 0, 0, 1, 1, 1, 2, 3, 4, 3, 4, 5, 4, 4, 2, 2, 0, 0, 0, 0, 0, -2, -1, -2, -2, -3, -1, -2, -1, -2, -3, 0, -1, -2, -2, -1, -2, -3, -2, -2, -2, 19, -9, -2, -2, -1, -2, -1, -2, -2, 0, -2, -1, 0, -4, -2, -1, -2, -2, -3, -2, -3, -3, -2, -4, -3, -2, 4, 17, 31, 35, 19, 6, 2, 0, 0, 0, -2, -2, -2, -3, -2, -2, -3, -2, -2, -1, -2, -2, -1, 0, -2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 4, 2, 3, 2, 0, 0, 0, -1, 0, 0, -1, -2, 0, -1, 0, -1, -1, 0, -2, -1, 0, -1, -1, -1, -1, 0, 0, -3, -2, 13, -5, -3, -2, -2, 0, 0, -1, 0, -1, 0, -2, -1, -2, 0, -2, 0, -2, -2, -4, -4, -3, -2, -2, -1, 0, 13, 28, 37, 25, 11, 2, 0, 1, -1, -2, -2, -3, -4, -2, -2, -3, -2, -2, -3, -2, -2, -2, 0, -1, 0, -1, 0, 0, 0, 0, 1, 1, 2, 1, 3, 3, 3, 4, 4, 4, 4, 2, 1, 0, 0, 0, -1, -2, -2, -1, -2, -2, -2, -1, -2, -1, -2, -1, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, 17, -8, -2, -3, -1, -2, 0, -1, 0, -3, -2, -1, -2, -2, -1, -2, -2, -1, -4, -4, -5, -3, -4, -2, -4, -1, 9, 21, 34, 35, 10, 0, -1, 0, -1, -2, -2, -2, -4, -5, -3, -2, -2, -2, -3, -2, -2, -1, -1, 0, -2, 0, 0, 0, 0, 1, 0, 2, 3, 2, 2, 2, 4, 3, 4, 3, 4, 2, 1, 2, 0, -1, 0, -1, -2, -2, -1, 0, -2, 0, -2, -3, -2, -1, -2, -2, -2, -1, -2, -2, -2, -2, -3, -2, 17, -11, -2, -1, -2, 0, -2, -1, 0, -2, -1, -2, -1, -2, -2, -3, -2, -2, -2, -3, -3, -4, -5, -4, -5, -1, 6, 20, 32, 33, 13, 1, -2, 0, -1, -2, -2, -2, -3, -4, -3, -2, -4, -2, -2, -4, -2, -2, -1, -1, -2, -1, -1, 0, 0, 0, 0, 1, 2, 2, 1, 3, 4, 3, 4, 4, 4, 3, 0, 1, 0, -2, 0, 0, -2, -2, -2, -2, 0, -2, -2, 0, -2, -4, -2, -2, -2, -2, -1, -2, -4, -2, -2, -3, 14, -10, -4, -2, 0, -1, -2, -2, -1, -2, -2, -2, -1, -2, -3, -2, -2, -2, -2, -4, -3, -4, -2, -4, -3, -2, 4, 15, 30, 33, 18, 6, 0, 0, -1, -2, -3, -5, -3, -3, -2, -3, -2, -3, -5, -3, -2, -3, -2, -3, -2, 0, -1, -2, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 3, 3, 4, 2, 1, 0, 0, 0, -2, 0, -2, -1, -2, -2, -1, -2, -3, -2, -1, -2, -3, -2, -2, -2, -2, -2, -2, -2, -2, -2, 2, 12, -9, -2, -2, -1, -2, -1, -2, 0, -2, -3, -2, -2, -2, -2, -2, -1, -3, -5, -4, -2, -4, -3, -4, -3, 1, 13, 27, 33, 23, 8, 0, 0, 0, -2, -2, -3, -3, -4, -3, -2, -4, -3, -4, -2, -2, -2, -2, -3, -1, 0, 0, 0, 0, -1, 0, 0, 2, 0, 2, 2, 2, 2, 4, 2, 4, 2, 2, 0, 0, 0, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -3, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -3, -2, 15, -10, -3, -2, -1, 0, -2, -2, -2, -2, -1, -2, -2, -3, -1, -3, -2, -3, -3, -3, -3, -4, -3, -5, -2, 0, 10, 24, 33, 25, 8, -1, 0, 0, 0, -2, -3, -2, -4, -2, -2, -3, -3, -2, -3, -2, -2, -2, -1, 0, -1, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 4, 4, 3, 4, 4, 3, 4, 1, 0, 0, 0, 0, 0, -2, -2, -1, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -3, -3, -3, -1, 12, -9, -4, -2, -2, -1, -1, -1, -2};

int pin_data  = 13;              // sa√≠da do PWM (eletrodo)
int pin_OnOff = 12;
int delayTime = 10;//300;
const long interval = 125; // interval at which to stop PWM (milliseconds)
unsigned long previousMillis = 0;
String control = "00";

void setup() {
  Serial.begin(9600);
  pinMode      (pin_data, OUTPUT); // pin 13
  pinMode      (pin_OnOff,OUTPUT);
  digitalWrite (pin_data, LOW );
  digitalWrite (pin_OnOff,HIGH);
}

void loop() {
  String data, packet;
  boolean shouldSend;
  uint32_t skey[4] = {0x9474B8E8, 0xC73BCA7D, 0x53239142, 0xF3C3121A};
  for(int i = 0; i < sizeof(myEcg); i++){         
    data = String(myEcg[i], BIN); // pacote de dados
    if(data.length() <= 8)
      packet += complete_zeros(8 - data.length()) + data;
    else if(data.length() > 8){
      for(int j = 8; j < data.length(); j++){
        packet += data[j];
      }
    }
    if (data != "") { // montagem do pacote   
      shouldSend = true;
       Serial.println(packet);
    }
    
    if (shouldSend) {
      shouldSend = false;
      //unsigned long currentMillis = millis();
      modulation(packet);                // envio do pacote 8bits em 1050ms
      //Serial.print("Time: ");
      //Serial.println(millis() - currentMillis);
      delay(delayTime);
    }
    // Reset variables
    packet = data = ""; 
  }
  delay(delayTime*1000);
}

void OOK_2mod(int state) {
  unsigned long currentMillis = micros();
  while (currentMillis + interval > micros())  //"espera ocupada"
    digitalWrite(pin_data,state);
}

void modulation(String packet){
  digitalWrite (pin_OnOff,LOW);
  //OOK_2mod(0);//startbit
  for (int i = 0; i < packet.length(); i++) {
    //Serial.print(packet.charAt(i));
    if (packet.charAt(i) == '0'){
      OOK_2mod(0);
    }
    else if (packet.charAt(i) == '1')
      OOK_2mod(1);
  }
  digitalWrite (pin_OnOff,HIGH);
  //Serial.println();
}

String complete_zeros(int len){
  String zeros;
  for (int i = 0; i < len; i++)
    zeros = zeros + "0";
  return zeros;
}
